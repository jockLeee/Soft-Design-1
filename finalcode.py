# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'TransforerV1.0.ui'
# Created by:  harbin university of science and technology, department of automation, China
# Last programming time: 01/10/2022
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
# import PhotoBag_rc
import sys
import cv2
# import os
import numpy
# import glob
import math
from skimage import morphology
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *


class Image_Process(object):
    def __init__(self):
        self.calib_path = ".\\calib"
        self.set1 = []
        self.set2 = []
        self.lst1 = []
        self.ls2 = []
        self.bofeng_mid_point = []
        self.bogu_mid_point = []

    def medial_ax(self, binary):
        binary[binary == 255] = 1
        skel, distance = morphology.medial_axis(binary, return_distance=True)
        dist_on_skel = distance * skel
        dist_on_skel = dist_on_skel.astype(numpy.uint8) * 255
        return dist_on_skel

    def bubble_sort(self, sequence, sequence2, sequence3):
        for i in range(1, len(sequence)):
            for j in range(0, len(sequence) - 1):
                if sequence[j] > sequence[j + 1]:
                    sequence[j], sequence[j + 1] = sequence[j + 1], sequence[j]
                    sequence2[j], sequence2[j + 1] = sequence2[j + 1], sequence2[j]
                    sequence3[j], sequence3[j + 1] = sequence3[j + 1], sequence3[j]
        return sequence

    def delete_num(self, temp, temp1, temp2):
        k = 1
        for i in range(0, len(temp) - 1):
            for j in range(k, len(temp)):
                if temp[j] - temp[i] < 5:
                    temp.pop(i)
                    temp1.pop(i)
                    temp2.pop(i)
                    k += 1
                    break
                else:
                    k += 1
                    break
        return temp

    def BiLinear_interpolation(self, img, dstH, dstW):
        scrH, scrW, _ = img.shape
        img = numpy.pad(img, ((0, 1), (0, 1), (0, 0)), 'constant')
        retimg = numpy.zeros((dstH, dstW, 3), dtype=numpy.uint8)
        for i in range(dstH):
            for j in range(dstW):
                scrx = (i + 1) * (scrH / dstH) - 1
                scry = (j + 1) * (scrW / dstW) - 1
                x = math.floor(scrx)
                y = math.floor(scry)
                u = scrx - x
                v = scry - y
                retimg[i, j] = (1 - u) * (1 - v) * img[x, y] + \
                               u * (1 - v) * img[x + 1, y] + \
                               (1 - u) * v * img[x, y + 1] + \
                               u * v * img[x + 1, y + 1]
        return retimg

    def delete_repit(self, list):
        temp_set = []
        mid_num_x = 0
        mid_num_y = 0
        temp_set.append(list[0])
        for i in range(1, len(list)):
            if list[i][0] - list[0][0] < 40:
                temp_set.append(list[i])
        for i in range(0, len(temp_set)):
            mid_num_x += temp_set[i][0]
            mid_num_y += temp_set[i][1]
        mid_num_x = mid_num_x / len(temp_set)
        mid_num_y = mid_num_y / len(temp_set)
        mid_num_x = int(mid_num_x)
        mid_num_y = int(mid_num_y)
        return len(temp_set), [mid_num_x, mid_num_y]

    def type_M(self, bo_feng, bo_gu):
        flag1 = 0
        flag2 = 0
        gu_to_feng_point = []
        feng_to_gu_point = []
        FLAG1 = 0
        FLAG2 = 0
        last_bo_gu = []
        last_bo_feng = []
        bo_feng.pop(0)
        bo_feng.pop(len(bo_feng) - 1)
        # print(bo_feng)
        # print(bo_gu)
        for i in range(len(bo_feng) + len(bo_gu) - 1):
            if i % 2 == 0:
                # cv2.line(canny, (bo_gu[flag2][0], bo_gu[flag2][1]),(bo_feng[flag2][0], bo_feng[flag2][1]), (255, 255, 255), 1)
                xielv_k_gu = (bo_feng[flag2][1] - bo_gu[flag2][1]) / (bo_feng[flag2][0] - bo_gu[flag2][0])
                mid_point_x_gu = (bo_gu[flag2][0] + bo_feng[flag2][0]) / 2
                mid_point_y_gu = (bo_gu[flag2][1] + bo_feng[flag2][1]) / 2
                zhongxian_k_gu = -1 / xielv_k_gu
                zhongxian_k_gu = round(zhongxian_k_gu, 3)
                chuixian_x1_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (190 - mid_point_y_gu)
                chuixian_x2_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (310 - mid_point_y_gu)
                # cv2.line(canny, (int(chuixian_x1_gu), 190),(int(chuixian_x2_gu), 310), (255, 255, 255), 1)
                flag2 += 1
                temp1 = []
                temp1.append(zhongxian_k_gu)
                temp1.append([mid_point_x_gu, mid_point_y_gu])
                gu_to_feng_point.append(temp1)
            else:
                # cv2.line(canny, (bo_feng[flag1][0], bo_feng[flag1][1]),(bo_gu[flag1 + 1][0], bo_gu[flag1 + 1][1]), (255, 255, 255), 1)
                xielv_k_feng = (bo_feng[flag1][1] - bo_gu[flag1 + 1][1]) / (bo_feng[flag1][0] - bo_gu[flag1 + 1][0])
                mid_point_x_feng = (bo_feng[flag1][0] + bo_gu[flag1 + 1][0]) / 2
                mid_point_y_feng = (bo_feng[flag1][1] + bo_gu[flag1 + 1][1]) / 2
                zhongxian_k_feng = -1 / xielv_k_feng
                zhongxian_k_feng = round(zhongxian_k_feng, 3)
                chuixian_x1_feng = mid_point_x_feng + (1 / zhongxian_k_feng) * (190 - mid_point_y_feng)
                chuixian_x2_feng = mid_point_x_feng + (1 / zhongxian_k_feng) * (310 - mid_point_y_feng)
                # cv2.line(canny, (round(chuixian_x1_feng), 190),(round(chuixian_x2_feng), 310), (255, 255, 255), 1)
                flag1 += 1
                temp2 = []
                temp2.append(zhongxian_k_feng)
                temp2.append([mid_point_x_feng, mid_point_y_feng])
                feng_to_gu_point.append(temp2)

        for i in range(len(gu_to_feng_point)):
            x1 = gu_to_feng_point[FLAG1][1][0]
            y1 = gu_to_feng_point[FLAG1][1][1]
            k1 = gu_to_feng_point[FLAG1][0]
            x2 = feng_to_gu_point[FLAG1][1][0]
            y2 = feng_to_gu_point[FLAG1][1][1]
            k2 = feng_to_gu_point[FLAG1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_gu.append([round(x, 3), round(y, 3)])
            FLAG1 += 1
        # last_bo_gu = numpy.array(last_bo_gu)
        for i in range(len(feng_to_gu_point) - 1):
            x1 = feng_to_gu_point[FLAG2][1][0]
            y1 = feng_to_gu_point[FLAG2][1][1]
            k1 = feng_to_gu_point[FLAG2][0]
            x2 = gu_to_feng_point[FLAG2 + 1][1][0]
            y2 = gu_to_feng_point[FLAG2 + 1][1][1]
            k2 = gu_to_feng_point[FLAG2 + 1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_feng.append([round(x, 3), round(y, 3)])
            FLAG2 += 1
        # last_bo_feng = numpy.array(last_bo_feng)
        return last_bo_gu, last_bo_feng

    def type_W(self, bo_feng, bo_gu):
        flag1 = 0
        flag2 = 0
        gu_to_feng_point = []
        feng_to_gu_point = []
        FLAG1 = 0
        FLAG2 = 0
        last_bo_gu = []
        last_bo_feng = []
        bo_gu.pop(0)
        bo_gu.pop(len(bo_gu) - 1)
        # print(bo_feng)
        # print(bo_gu)
        for i in range(len(bo_feng) + len(bo_gu) - 1):
            if i % 2 == 0:
                # cv2.line(canny, (bo_feng[flag1][0], bo_feng[flag1][1]), (bo_gu[flag1][0], bo_gu[flag1][1]), (255, 255, 255), 1)
                xielv_k_feng = (bo_gu[flag1][1] - bo_feng[flag1][1]) / (bo_gu[flag1][0] - bo_feng[flag1][0])
                mid_point_x_feng = (bo_feng[flag1][0] + bo_gu[flag1][0]) / 2
                mid_point_y_feng = (bo_feng[flag1][1] + bo_gu[flag1][1]) / 2
                zhongxian_k_feng = -1 / xielv_k_feng
                zhongxian_k_feng = round(zhongxian_k_feng, 3)
                chuixian_x1_feng = mid_point_x_feng + (1 / zhongxian_k_feng) * (190 - mid_point_y_feng)
                chuixian_x2_feng = mid_point_x_feng + (1 / zhongxian_k_feng) * (310 - mid_point_y_feng)
                # cv2.line(canny, (round(chuixian_x1_feng), 190), (round(chuixian_x2_feng), 310), (255, 255, 255), 1)
                flag1 += 1
                temp1 = []
                temp1.append(zhongxian_k_feng)
                temp1.append([mid_point_x_feng, mid_point_y_feng])
                feng_to_gu_point.append(temp1)

            else:
                # cv2.line(canny, (bo_gu[flag2][0], bo_gu[flag2][1]), (bo_feng[flag2 + 1][0], bo_feng[flag2 + 1][1]), (255, 255, 255), 1)
                xielv_k_gu = (bo_feng[flag2 + 1][1] - bo_gu[flag2][1]) / (bo_feng[flag2 + 1][0] - bo_gu[flag2][0])
                mid_point_x_gu = (bo_gu[flag2][0] + bo_feng[flag2 + 1][0]) / 2
                mid_point_y_gu = (bo_gu[flag2][1] + bo_feng[flag2 + 1][1]) / 2
                zhongxian_k_gu = -1 / xielv_k_gu
                zhongxian_k_gu = round(zhongxian_k_gu, 3)
                chuixian_x1_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (190 - mid_point_y_gu)
                chuixian_x2_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (310 - mid_point_y_gu)
                # cv2.line(canny, (int(chuixian_x1_gu), 190), (int(chuixian_x2_gu), 310), (255, 255, 255), 1)
                flag2 += 1
                temp2 = []
                temp2.append(zhongxian_k_gu)
                temp2.append([mid_point_x_gu, mid_point_y_gu])
                gu_to_feng_point.append(temp2)

        for i in range(len(feng_to_gu_point)):
            x1 = feng_to_gu_point[FLAG1][1][0]
            y1 = feng_to_gu_point[FLAG1][1][1]
            k1 = feng_to_gu_point[FLAG1][0]
            x2 = gu_to_feng_point[FLAG1][1][0]
            y2 = gu_to_feng_point[FLAG1][1][1]
            k2 = gu_to_feng_point[FLAG1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_feng.append([round(x, 3), round(y, 3)])
            FLAG1 += 1
        # last_bo_feng = numpy.array(last_bo_feng)
        for i in range(len(gu_to_feng_point) - 1):
            x1 = gu_to_feng_point[FLAG2][1][0]
            y1 = gu_to_feng_point[FLAG2][1][1]
            k1 = gu_to_feng_point[FLAG2][0]
            x2 = feng_to_gu_point[FLAG2 + 1][1][0]
            y2 = feng_to_gu_point[FLAG2 + 1][1][1]
            k2 = feng_to_gu_point[FLAG2 + 1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_gu.append([round(x, 3), round(y, 3)])
            FLAG2 += 1
        # last_bo_gu = numpy.array(last_bo_gu)
        return last_bo_gu, last_bo_feng

    def type_INV_N(self, bo_feng, bo_gu):
        flag1 = 0
        flag2 = 0
        gu_to_feng_point = []
        feng_to_gu_point = []
        FLAG1 = 0
        FLAG2 = 0
        last_bo_gu = []
        last_bo_feng = []
        bo_gu.pop(0)
        bo_feng.pop(len(bo_feng) - 1)
        # print(bo_feng)
        # print(bo_gu)
        for i in range(len(bo_feng) + len(bo_gu) - 1):
            if i % 2 == 0:
                # cv2.line(canny, (bo_feng[flag1][0], bo_feng[flag1][1]), (bo_gu[flag1][0], bo_gu[flag1][1]), (255, 255, 255), 1)
                xielv_k_feng = (bo_gu[flag1][1] - bo_feng[flag1][1]) / (bo_gu[flag1][0] - bo_feng[flag1][0])
                mid_point_x_feng = (bo_feng[flag1][0] + bo_gu[flag1][0]) / 2
                mid_point_y_feng = (bo_feng[flag1][1] + bo_gu[flag1][1]) / 2
                zhongxian_k_feng = -1 / xielv_k_feng
                zhongxian_k_feng = round(zhongxian_k_feng, 3)
                chuixian_x1_feng = mid_point_x_feng + (1 / zhongxian_k_feng) * (190 - mid_point_y_feng)
                chuixian_x2_feng = mid_point_x_feng + (1 / zhongxian_k_feng) * (310 - mid_point_y_feng)
                # cv2.line(canny, (round(chuixian_x1_feng), 190), (round(chuixian_x2_feng), 310), (255, 255, 255), 1)
                flag1 += 1
                temp1 = []
                temp1.append(zhongxian_k_feng)
                temp1.append([mid_point_x_feng, mid_point_y_feng])
                feng_to_gu_point.append(temp1)
            else:
                if flag2 < (len(bo_gu) - 1):
                    # cv2.line(canny, (bo_gu[flag2][0], bo_gu[flag2][1]), (bo_feng[flag2 + 1][0], bo_feng[flag2 + 1][1]),(255, 255, 255), 1)
                    xielv_k_gu = (bo_feng[flag2 + 1][1] - bo_gu[flag2][1]) / (bo_feng[flag2 + 1][0] - bo_gu[flag2][0])
                    mid_point_x_gu = (bo_gu[flag2][0] + bo_feng[flag2 + 1][0]) / 2
                    mid_point_y_gu = (bo_gu[flag2][1] + bo_feng[flag2 + 1][1]) / 2
                    zhongxian_k_gu = -1 / xielv_k_gu
                    zhongxian_k_gu = round(zhongxian_k_gu, 3)
                    chuixian_x1_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (190 - mid_point_y_gu)
                    chuixian_x2_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (310 - mid_point_y_gu)
                    # cv2.line(canny, (int(chuixian_x1_gu), 190), (int(chuixian_x2_gu), 310), (255, 255, 255), 1)
                    flag2 += 1
                    temp2 = []
                    temp2.append(zhongxian_k_gu)
                    temp2.append([mid_point_x_gu, mid_point_y_gu])
                    gu_to_feng_point.append(temp2)

        for i in range(len(feng_to_gu_point) - 1):
            x1 = feng_to_gu_point[FLAG1][1][0]
            y1 = feng_to_gu_point[FLAG1][1][1]
            k1 = feng_to_gu_point[FLAG1][0]
            x2 = gu_to_feng_point[FLAG1][1][0]
            y2 = gu_to_feng_point[FLAG1][1][1]
            k2 = gu_to_feng_point[FLAG1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_feng.append([round(x, 3), round(y, 3)])
            FLAG1 += 1
        # last_bo_feng = numpy.array(last_bo_feng)
        for i in range(len(gu_to_feng_point)):
            x1 = gu_to_feng_point[FLAG2][1][0]
            y1 = gu_to_feng_point[FLAG2][1][1]
            k1 = gu_to_feng_point[FLAG2][0]
            x2 = feng_to_gu_point[FLAG2 + 1][1][0]
            y2 = feng_to_gu_point[FLAG2 + 1][1][1]
            k2 = feng_to_gu_point[FLAG2 + 1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_gu.append([round(x, 3), round(y, 3)])
            FLAG2 += 1
        # last_bo_gu = numpy.array(last_bo_gu)
        return last_bo_gu, last_bo_feng

    def type_N(self, bo_feng, bo_gu):
        flag1 = 0
        flag2 = 0
        gu_to_feng_point = []
        feng_to_gu_point = []
        FLAG1 = 0
        FLAG2 = 0
        last_bo_gu = []
        last_bo_feng = []
        bo_feng.pop(0)
        bo_gu.pop(len(bo_gu) - 1)
        # print(bo_feng)
        # print(bo_gu)
        for i in range(len(bo_feng) + len(bo_gu) - 1):
            if i % 2 == 0:
                # cv2.line(canny, (bo_gu[flag1][0], bo_gu[flag1][1]), (bo_feng[flag1][0], bo_feng[flag1][1]), (255, 255, 255), 1)
                xielv_k_gu = (bo_feng[flag1][1] - bo_gu[flag1][1]) / (bo_feng[flag1][0] - bo_gu[flag1][0])
                mid_point_x_gu = (bo_feng[flag1][0] + bo_gu[flag1][0]) / 2
                mid_point_y_gu = (bo_feng[flag1][1] + bo_gu[flag1][1]) / 2
                zhongxian_k_gu = -1 / xielv_k_gu
                zhongxian_k_gu = round(zhongxian_k_gu, 3)
                chuixian_x1_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (190 - mid_point_y_gu)
                chuixian_x2_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (310 - mid_point_y_gu)
                # cv2.line(canny, (int(chuixian_x1_gu), 190), (int(chuixian_x2_gu), 310), (255, 255, 255), 1)
                flag1 += 1
                temp1 = []
                temp1.append(zhongxian_k_gu)
                temp1.append([mid_point_x_gu, mid_point_y_gu])
                gu_to_feng_point.append(temp1)
            else:
                if flag2 < (len(bo_feng) - 1):
                    # cv2.line(canny, (bo_feng[flag2][0], bo_feng[flag2][1]), (bo_gu[flag2 + 1][0], bo_gu[flag2 + 1][1]),(255, 255, 255), 1)
                    xielv_k_gu = (bo_gu[flag2 + 1][1] - bo_feng[flag2][1]) / (bo_gu[flag2 + 1][0] - bo_feng[flag2][0])
                    mid_point_x_gu = (bo_feng[flag2][0] + bo_gu[flag2 + 1][0]) / 2
                    mid_point_y_gu = (bo_feng[flag2][1] + bo_gu[flag2 + 1][1]) / 2
                    zhongxian_k_gu = -1 / xielv_k_gu
                    zhongxian_k_gu = round(zhongxian_k_gu, 3)
                    chuixian_x1_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (190 - mid_point_y_gu)
                    chuixian_x2_gu = mid_point_x_gu + (1 / zhongxian_k_gu) * (310 - mid_point_y_gu)
                    # cv2.line(canny, (int(chuixian_x1_gu), 190), (int(chuixian_x2_gu), 310), (255, 255, 255), 1)
                    flag2 += 1
                    temp2 = []
                    temp2.append(zhongxian_k_gu)
                    temp2.append([mid_point_x_gu, mid_point_y_gu])
                    feng_to_gu_point.append(temp2)

        for i in range(len(gu_to_feng_point) - 1):
            x1 = gu_to_feng_point[FLAG1][1][0]
            y1 = gu_to_feng_point[FLAG1][1][1]
            k1 = gu_to_feng_point[FLAG1][0]
            x2 = feng_to_gu_point[FLAG1][1][0]
            y2 = feng_to_gu_point[FLAG1][1][1]
            k2 = feng_to_gu_point[FLAG1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_gu.append([round(x, 3), round(y, 3)])
            FLAG1 += 1
        # last_bo_gu = numpy.array(last_bo_gu)
        for i in range(len(feng_to_gu_point)):
            x1 = feng_to_gu_point[FLAG2][1][0]
            y1 = feng_to_gu_point[FLAG2][1][1]
            k1 = feng_to_gu_point[FLAG2][0]
            x2 = gu_to_feng_point[FLAG2 + 1][1][0]
            y2 = gu_to_feng_point[FLAG2 + 1][1][1]
            k2 = gu_to_feng_point[FLAG2 + 1][0]
            x = (k1 * x1 - y1 - k2 * x2 + y2) / (k1 - k2)
            y = k1 * (x - x1) + y1
            last_bo_feng.append([round(x, 3), round(y, 3)])
            FLAG2 += 1
        # last_bo_feng = numpy.array(last_bo_feng)
        return last_bo_gu, last_bo_feng


class Ui_MainWindow(QWidget):
    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.timer_camera1 = QtCore.QTimer()  # 定义定时器，用于控制显示视频的帧率
        self.timer_camera2 = QtCore.QTimer()  # 定义定时器，用于控制显示视频的帧率
        self.cap1 = cv2.VideoCapture()  # 视频流
        self.cap2 = cv2.VideoCapture()  # 视频流
        self.cap2.set(3, 4024)
        self.cap2.set(4, 3036)
        self.CAM_NUM1 = 0  # 为0时表示视频流来自笔记本内置摄像头
        self.CAM_NUM2 = 1  # 为1时表示视频流来自笔记本外置摄像头
        self.Freq = 1
        self.FLAG = 0
        self.save_path = './calib/'
        self.image_process = Image_Process()
        self.Final_value1 = []  # 最终导线相邻线距集合
        self.set11 = []  # 原始图像边缘结合
        self.set21 = []  # 扩张图像边缘集合
        self.lst11 = []  # 波谷集合
        self.lst21 = []  # 波峰集合
        self.bofeng_mid_point1 = []  # 最终波峰坐标集合
        self.bogu_mid_point1 = []  # 最终波谷坐标集合

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1140, 710)
        MainWindow.setMinimumSize(QtCore.QSize(1140, 710))
        MainWindow.setMaximumSize(QtCore.QSize(1140, 710))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 240, 461, 421))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(14)
        self.tabWidget.setFont(font)
        self.tabWidget.setStyleSheet("#tabWidegt\n"
                                     "{\n"
                                     "    background-color: rgb(73, 221, 108);\n"
                                     "    background-color: rgb(0, 85, 255);\n"
                                     "}\n"
                                     "\n"
                                     "\n"
                                     "\n"
                                     "")
        self.tabWidget.setIconSize(QtCore.QSize(32, 32))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setStyleSheet("#tab_2\n"
                                 "{\n"
                                 "background-color: rgb(235, 235, 235);\n"
                                 "}")
        self.tab_2.setObjectName("tab_2")
        self.label_10 = QtWidgets.QLabel(self.tab_2)
        self.label_10.setGeometry(QtCore.QRect(20, 10, 71, 21))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("#label_10\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.label_10.setObjectName("label_10")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 431, 91))
        self.label_3.setStyleSheet("#label_3\n"
                                   "{border: 1px solid;\n"
                                   "border-color: rgb(180,180 , 180);}")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_4.setGeometry(QtCore.QRect(130, 30, 80, 30))
        self.lineEdit_4.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_4.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_4.setFont(font)
        self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_18 = QtWidgets.QLabel(self.tab_2)
        self.label_18.setGeometry(QtCore.QRect(20, 30, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.tab_2)
        self.label_19.setGeometry(QtCore.QRect(20, 70, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_5.setGeometry(QtCore.QRect(130, 70, 80, 30))
        self.lineEdit_5.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_5.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_5.setFont(font)
        self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_5.setText("")
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_21 = QtWidgets.QLabel(self.tab_2)
        self.label_21.setGeometry(QtCore.QRect(220, 30, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_7.setGeometry(QtCore.QRect(330, 30, 80, 30))
        self.lineEdit_7.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_7.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_7.setFont(font)
        self.lineEdit_7.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.label_20 = QtWidgets.QLabel(self.tab_2)
        self.label_20.setGeometry(QtCore.QRect(220, 70, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(330, 70, 80, 30))
        self.lineEdit_6.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_6.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.label_22 = QtWidgets.QLabel(self.tab_2)
        self.label_22.setGeometry(QtCore.QRect(10, 130, 431, 61))
        self.label_22.setStyleSheet("#label_22\n"
                                    "{border: 1px solid;\n"
                                    "border-color: rgb(180,180 , 180);}")
        self.label_22.setText("")
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.tab_2)
        self.label_23.setGeometry(QtCore.QRect(20, 120, 71, 21))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_23.setFont(font)
        self.label_23.setStyleSheet("#label_23\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.label_23.setObjectName("label_23")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_8.setGeometry(QtCore.QRect(130, 140, 80, 30))
        self.lineEdit_8.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_8.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_8.setFont(font)
        self.lineEdit_8.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.label_24 = QtWidgets.QLabel(self.tab_2)
        self.label_24.setGeometry(QtCore.QRect(20, 140, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.tab_2)
        self.label_25.setGeometry(QtCore.QRect(230, 140, 81, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.label_31 = QtWidgets.QLabel(self.tab_2)
        self.label_31.setGeometry(QtCore.QRect(250, 270, 101, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_31.setFont(font)
        self.label_31.setObjectName("label_31")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_10.setGeometry(QtCore.QRect(350, 230, 80, 30))
        self.lineEdit_10.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_10.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_10.setFont(font)
        self.lineEdit_10.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.label_30 = QtWidgets.QLabel(self.tab_2)
        self.label_30.setGeometry(QtCore.QRect(270, 230, 81, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_30.setFont(font)
        self.label_30.setObjectName("label_30")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_12.setGeometry(QtCore.QRect(350, 270, 80, 30))
        self.lineEdit_12.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_12.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_12.setFont(font)
        self.lineEdit_12.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.label_26 = QtWidgets.QLabel(self.tab_2)
        self.label_26.setGeometry(QtCore.QRect(10, 210, 431, 101))
        self.label_26.setStyleSheet("#label_26\n"
                                    "{border: 1px solid;\n"
                                    "border-color: rgb(180,180 , 180);}"
                                    )
        self.label_26.setText("")
        self.label_26.setObjectName("label_26")
        self.label_28 = QtWidgets.QLabel(self.tab_2)
        self.label_28.setGeometry(QtCore.QRect(20, 230, 131, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.tab_2)
        self.label_29.setGeometry(QtCore.QRect(20, 200, 71, 21))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("#label_29\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.label_29.setObjectName("label_29")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_11.setGeometry(QtCore.QRect(160, 230, 80, 30))
        self.lineEdit_11.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_11.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_11.setFont(font)
        self.lineEdit_11.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_13.setGeometry(QtCore.QRect(160, 270, 80, 30))
        self.lineEdit_13.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_13.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_13.setFont(font)
        self.lineEdit_13.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_13.setText("")
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.label_27 = QtWidgets.QLabel(self.tab_2)
        self.label_27.setGeometry(QtCore.QRect(20, 270, 131, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_27.setFont(font)
        self.label_27.setObjectName("label_27")
        self.comboBox = QtWidgets.QComboBox(self.tab_2)
        self.comboBox.setGeometry(QtCore.QRect(310, 140, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("#comboBox\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setGeometry(QtCore.QRect(10, 330, 431, 51))
        self.label_13.setStyleSheet("#label_13\n"
                                    "{border: 1px solid;\n"
                                    "border-color: rgb(180,180 , 180);}")
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.label_8 = QtWidgets.QLabel(self.tab_2)
        self.label_8.setGeometry(QtCore.QRect(20, 320, 71, 21))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("#label_8\n"
                                   "{\n"
                                   "background-color: rgb(235, 235, 235);\n"
                                   "}")
        self.label_8.setObjectName("label_8")
        self.label_60 = QtWidgets.QLabel(self.tab_2)
        self.label_60.setGeometry(QtCore.QRect(170, 340, 91, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_60.setFont(font)
        self.label_60.setObjectName("label_60")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_9.setGeometry(QtCore.QRect(80, 340, 80, 30))
        self.lineEdit_9.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_9.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_9.setFont(font)
        self.lineEdit_9.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.label_26.raise_()
        self.label_3.raise_()
        self.label_10.raise_()
        self.lineEdit_4.raise_()
        self.label_18.raise_()
        self.label_19.raise_()
        self.lineEdit_5.raise_()
        self.label_21.raise_()
        self.lineEdit_7.raise_()
        self.label_20.raise_()
        self.lineEdit_6.raise_()
        self.label_22.raise_()
        self.label_23.raise_()
        self.lineEdit_8.raise_()
        self.label_24.raise_()
        self.label_25.raise_()
        self.label_31.raise_()
        self.lineEdit_10.raise_()
        self.label_30.raise_()
        self.lineEdit_12.raise_()
        self.label_28.raise_()
        self.label_29.raise_()
        self.lineEdit_11.raise_()
        self.lineEdit_13.raise_()
        self.label_27.raise_()
        self.comboBox.raise_()
        self.label_13.raise_()
        self.label_8.raise_()
        self.label_60.raise_()
        self.lineEdit_9.raise_()
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setStyleSheet("#tab_3\n"
                                 "{\n"
                                 "background-color: rgb(235, 235, 235);\n"
                                 "}")
        self.tab_3.setObjectName("tab_3")
        self.label_32 = QtWidgets.QLabel(self.tab_3)
        self.label_32.setGeometry(QtCore.QRect(10, 20, 281, 151))
        self.label_32.setStyleSheet("#label_32\n"
                                    "{border: 1px solid;\n"
                                    "border-color: rgb(180,180 , 180);}")
        self.label_32.setText("")
        self.label_32.setObjectName("label_32")
        self.label_33 = QtWidgets.QLabel(self.tab_3)
        self.label_33.setGeometry(QtCore.QRect(20, 0, 81, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("#label_33\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.label_33.setObjectName("label_33")
        self.checkBox_3 = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_3.setGeometry(QtCore.QRect(20, 120, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.checkBox_3.setFont(font)
        self.checkBox_3.setStyleSheet("#checkBox_3:checked\n"
                                      "{\n"
                                      "    color: rgb(85, 170, 0);\n"
                                      "}\n"
                                      "#checkBox_3:!checked\n"
                                      "{\n"
                                      "    color: rgb(255, 0, 0);\n"
                                      "}")
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox.setGeometry(QtCore.QRect(20, 40, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.checkBox.setFont(font)
        self.checkBox.setStyleSheet("")
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(self.tab_3)
        self.checkBox_2.setGeometry(QtCore.QRect(20, 80, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.checkBox_2.setFont(font)
        self.checkBox_2.setStyleSheet("")
        self.checkBox_2.setObjectName("checkBox_2")
        self.comboBox_2 = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_2.setEnabled(False)
        self.comboBox_2.setGeometry(QtCore.QRect(160, 40, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setStyleSheet("#comboBox_2\n"
                                      "{\n"
                                      "background-color: rgb(235, 235, 235);\n"
                                      "}")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_3 = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_3.setEnabled(False)
        self.comboBox_3.setGeometry(QtCore.QRect(160, 80, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.comboBox_3.setFont(font)
        self.comboBox_3.setStyleSheet("#comboBox_3\n"
                                      "{\n"
                                      "background-color: rgb(235, 235, 235);\n"
                                      "}")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_4 = QtWidgets.QComboBox(self.tab_3)
        self.comboBox_4.setEnabled(False)
        self.comboBox_4.setGeometry(QtCore.QRect(110, 120, 161, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.comboBox_4.setFont(font)
        self.comboBox_4.setStyleSheet("#comboBox_4\n"
                                      "{\n"
                                      "background-color: rgb(235, 235, 235);\n"
                                      "}")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.label_35 = QtWidgets.QLabel(self.tab_3)
        self.label_35.setGeometry(QtCore.QRect(320, 0, 101, 41))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("#label_35\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.label_35.setObjectName("label_35")
        self.label_36 = QtWidgets.QLabel(self.tab_3)
        self.label_36.setGeometry(QtCore.QRect(310, 20, 121, 151))
        self.label_36.setStyleSheet("#label_36\n"
                                    "{border: 1px solid;\n"
                                    "border-color: rgb(180,180 , 180);}")
        self.label_36.setText("")
        self.label_36.setObjectName("label_36")
        self.label_37 = QtWidgets.QLabel(self.tab_3)
        self.label_37.setGeometry(QtCore.QRect(320, 40, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_37.setFont(font)
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.tab_3)
        self.label_38.setGeometry(QtCore.QRect(320, 100, 111, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_38.setFont(font)
        self.label_38.setObjectName("label_38")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_14.setGeometry(QtCore.QRect(330, 70, 80, 30))
        self.lineEdit_14.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_14.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_14.setFont(font)
        self.lineEdit_14.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.lineEdit_15 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_15.setGeometry(QtCore.QRect(330, 130, 80, 30))
        self.lineEdit_15.setMinimumSize(QtCore.QSize(80, 30))
        self.lineEdit_15.setMaximumSize(QtCore.QSize(80, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.lineEdit_15.setFont(font)
        self.lineEdit_15.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.textEdit_2 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_2.setGeometry(QtCore.QRect(10, 240, 421, 141))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_41 = QtWidgets.QLabel(self.tab_3)
        self.label_41.setGeometry(QtCore.QRect(10, 220, 101, 21))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.label_41.setFont(font)
        self.label_41.setStyleSheet("#label_35\n"
                                    "{\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "}")
        self.label_41.setObjectName("label_41")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_7.setGeometry(QtCore.QRect(10, 180, 91, 31))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("#pushButton_7\n"
                                        "{\n"
                                        "\n"
                                        "    background-color: rgb(214, 214, 214);\n"
                                        "}\n"
                                        "#pushButton_7:pressed\n"
                                        "{\n"
                                        "    background-color: rgb(0, 190, 0);\n"
                                        "}")
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_14 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_14.setGeometry(QtCore.QRect(190, 180, 91, 31))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setStyleSheet("#pushButton_14\n"
                                         "{\n"
                                         "\n"
                                         "    background-color: rgb(214, 214, 214);\n"
                                         "}\n"
                                         "#pushButton_14:pressed\n"
                                         "{\n"
                                         "    background-color: rgb(255, 0, 0);\n"
                                         "}")
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_11 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_11.setGeometry(QtCore.QRect(310, 180, 91, 31))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setStyleSheet("#pushButton_11\n"
                                         "{\n"
                                         "\n"
                                         "    background-color: rgb(214, 214, 214);\n"
                                         "}\n"
                                         "#pushButton_11:pressed\n"
                                         "{\n"
                                         "    background-color: rgb(0, 190, 0);\n"
                                         "}")
        self.pushButton_11.setObjectName("pushButton_11")
        self.label_36.raise_()
        self.label_35.raise_()
        self.label_32.raise_()
        self.label_33.raise_()
        self.checkBox_3.raise_()
        self.checkBox.raise_()
        self.checkBox_2.raise_()
        self.comboBox_2.raise_()
        self.comboBox_3.raise_()
        self.comboBox_4.raise_()
        self.label_37.raise_()
        self.label_38.raise_()
        self.lineEdit_14.raise_()
        self.lineEdit_15.raise_()
        self.textEdit_2.raise_()
        self.label_41.raise_()
        self.pushButton_7.raise_()
        self.pushButton_14.raise_()
        self.pushButton_11.raise_()
        self.tabWidget.addTab(self.tab_3, "")
        self.label_54 = QtWidgets.QLabel(self.centralwidget)
        self.label_54.setGeometry(QtCore.QRect(880, 470, 81, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_54.sizePolicy().hasHeightForWidth())
        self.label_54.setSizePolicy(sizePolicy)
        self.label_54.setMinimumSize(QtCore.QSize(0, 0))
        self.label_54.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(8)
        self.label_54.setFont(font)
        self.label_54.setObjectName("label_54")
        self.label_51 = QtWidgets.QLabel(self.centralwidget)
        self.label_51.setGeometry(QtCore.QRect(870, 410, 120, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_51.sizePolicy().hasHeightForWidth())
        self.label_51.setSizePolicy(sizePolicy)
        self.label_51.setMinimumSize(QtCore.QSize(120, 30))
        self.label_51.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(8)
        self.label_51.setFont(font)
        self.label_51.setObjectName("label_51")
        self.label_45 = QtWidgets.QLabel(self.centralwidget)
        self.label_45.setGeometry(QtCore.QRect(810, 340, 121, 31))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(14)
        self.label_45.setFont(font)
        self.label_45.setStyleSheet("#label_45\n"
                                    "{\n"
                                    " background-color: rgb(235,235,235);\n"
                                    "}")
        self.label_45.setObjectName("label_45")
        self.label_55 = QtWidgets.QLabel(self.centralwidget)
        self.label_55.setGeometry(QtCore.QRect(880, 500, 81, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_55.sizePolicy().hasHeightForWidth())
        self.label_55.setSizePolicy(sizePolicy)
        self.label_55.setMinimumSize(QtCore.QSize(0, 30))
        self.label_55.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.label_55.setFont(font)
        self.label_55.setObjectName("label_55")
        self.label_40 = QtWidgets.QLabel(self.centralwidget)
        self.label_40.setGeometry(QtCore.QRect(800, 90, 320, 240))
        self.label_40.setMinimumSize(QtCore.QSize(320, 240))
        self.label_40.setStyleSheet("#label_40\n"
                                    "{\n"
                                    "border: 2px dashed;\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "border-color: rgb(255, 0, 0);\n"
                                    "}")
        self.label_40.setObjectName("label_40")
        self.label_39 = QtWidgets.QLabel(self.centralwidget)
        self.label_39.setGeometry(QtCore.QRect(470, 340, 320, 240))
        self.label_39.setMinimumSize(QtCore.QSize(320, 240))
        self.label_39.setMaximumSize(QtCore.QSize(320, 240))
        self.label_39.setStyleSheet("#label_39{\n"
                                    "border: 2px dashed;\n"
                                    "border-color: rgb(255, 0, 0);\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "\n"
                                    "}")
        self.label_39.setObjectName("label_39")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(180, 160, 121, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("#pushButton_2\n"
                                        "{\n"
                                        "\n"
                                        "    background-color: rgb(214, 214, 214);\n"
                                        "}\n"
                                        "#pushButton_2:pressed\n"
                                        "{\n"
                                        "    background-color: rgb(255, 0, 0);\n"
                                        "}")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(180, 100, 121, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("#pushButton_4\n"
                                        "{\n"
                                        "\n"
                                        "    background-color: rgb(214, 214, 214);\n"
                                        "}\n"
                                        "#pushButton_4:pressed\n"
                                        "{\n"
                                        "    background-color: rgb(255, 0, 0);\n"
                                        "}")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(990, 610, 121, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setStyleSheet("#pushButton_10\n"
                                         "{\n"
                                         "    background-color: rgb(214, 214, 214);\n"
                                         "}\n"
                                         "#pushButton_10:pressed\n"
                                         "{\n"
                                         "    background-color: rgb(255, 0, 0);\n"
                                         "}")
        self.pushButton_10.setObjectName("pushButton_10")
        self.label_57 = QtWidgets.QLabel(self.centralwidget)
        self.label_57.setGeometry(QtCore.QRect(80, 0, 2023, 80))
        self.label_57.setMinimumSize(QtCore.QSize(990, 80))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        self.label_57.setFont(font)
        self.label_57.setStyleSheet("#label_57\n"
                                    "{\n"
                                    "    color: rgb(255, 255, 255);\n"
                                    "    border-image: url(blue.jpg);\n"
                                    "}")
        self.label_57.setPixmap(QtGui.QPixmap(":/图标/blue.jpg"))
        self.label_57.setObjectName("label_57")
        self.label_49 = QtWidgets.QLabel(self.centralwidget)
        self.label_49.setGeometry(QtCore.QRect(870, 380, 121, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_49.sizePolicy().hasHeightForWidth())
        self.label_49.setSizePolicy(sizePolicy)
        self.label_49.setMinimumSize(QtCore.QSize(120, 30))
        self.label_49.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(8)
        self.label_49.setFont(font)
        self.label_49.setObjectName("label_49")
        self.label_34 = QtWidgets.QLabel(self.centralwidget)
        self.label_34.setGeometry(QtCore.QRect(470, 90, 320, 240))
        self.label_34.setMinimumSize(QtCore.QSize(320, 240))
        self.label_34.setMaximumSize(QtCore.QSize(320, 240))
        self.label_34.setStyleSheet("#label_34\n"
                                    "{\n"
                                    "border: 2px dashed;\n"
                                    "background-color: rgb(235, 235, 235);\n"
                                    "\n"
                                    "border-color: rgb(255, 0, 0);\n"
                                    "}")
        self.label_34.setObjectName("label_34")
        self.label_56 = QtWidgets.QLabel(self.centralwidget)
        self.label_56.setGeometry(QtCore.QRect(880, 530, 81, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_56.sizePolicy().hasHeightForWidth())
        self.label_56.setSizePolicy(sizePolicy)
        self.label_56.setMinimumSize(QtCore.QSize(0, 30))
        self.label_56.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.label_56.setFont(font)
        self.label_56.setObjectName("label_56")
        self.label_52 = QtWidgets.QLabel(self.centralwidget)
        self.label_52.setGeometry(QtCore.QRect(870, 440, 101, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_52.sizePolicy().hasHeightForWidth())
        self.label_52.setSizePolicy(sizePolicy)
        self.label_52.setMinimumSize(QtCore.QSize(0, 30))
        self.label_52.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(8)
        self.label_52.setFont(font)
        self.label_52.setObjectName("label_52")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(30, 100, 121, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("#pushButton_3\n"
                                        "{\n"
                                        "\n"
                                        "background-color: rgb(214, 214, 214);\n"
                                        "}\n"
                                        "#pushButton_3:pressed\n"
                                        "{\n"
                                        "background-color: rgb(0, 190, 0);\n"
                                        "}")
        self.pushButton_3.setObjectName("pushButton_3")
        self.textEdit_5 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_5.setGeometry(QtCore.QRect(990, 380, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_5.sizePolicy().hasHeightForWidth())
        self.textEdit_5.setSizePolicy(sizePolicy)
        self.textEdit_5.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_5.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_5.setFont(font)
        self.textEdit_5.setObjectName("textEdit_5")
        self.label_48 = QtWidgets.QLabel(self.centralwidget)
        self.label_48.setGeometry(QtCore.QRect(0, 0, 80, 80))
        self.label_48.setMinimumSize(QtCore.QSize(80, 80))
        self.label_48.setMaximumSize(QtCore.QSize(80, 80))
        self.label_48.setStyleSheet("#label_48\n"
                                    "{\n"
                                    "    border-image: url(R-C.png);\n"
                                    "}")
        self.label_48.setText("")
        self.label_48.setPixmap(QtGui.QPixmap(":/图标/hlg.jpg"))
        self.label_48.setObjectName("label_48")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 160, 121, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("#pushButton\n"
                                      "{\n"
                                      "    selection-color: rgb(0, 85, 255);\n"
                                      "    background-color: rgb(214, 214, 214);\n"
                                      "\n"
                                      "}\n"
                                      "#pushButton:pressed\n"
                                      "{\n"
                                      "    background-color: rgb(0, 190, 0);\n"
                                      "}")
        self.pushButton.setCheckable(False)
        self.pushButton.setChecked(False)
        self.pushButton.setAutoExclusive(False)
        self.pushButton.setObjectName("pushButton")
        self.label_42 = QtWidgets.QLabel(self.centralwidget)
        self.label_42.setGeometry(QtCore.QRect(10, 90, 311, 141))
        self.label_42.setStyleSheet("#label_42\n"
                                    "{border: 1px solid;\n"
                                    "border-color: rgb(180,180 , 180);}")
        self.label_42.setText("")
        self.label_42.setObjectName("label_42")
        self.textEdit_6 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_6.setGeometry(QtCore.QRect(990, 410, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_6.sizePolicy().hasHeightForWidth())
        self.textEdit_6.setSizePolicy(sizePolicy)
        self.textEdit_6.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_6.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_6.setFont(font)
        self.textEdit_6.setObjectName("textEdit_6")
        self.textEdit_7 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_7.setGeometry(QtCore.QRect(990, 440, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_7.sizePolicy().hasHeightForWidth())
        self.textEdit_7.setSizePolicy(sizePolicy)
        self.textEdit_7.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_7.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_7.setFont(font)
        self.textEdit_7.setObjectName("textEdit_7")
        self.textEdit_8 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_8.setGeometry(QtCore.QRect(990, 470, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_8.sizePolicy().hasHeightForWidth())
        self.textEdit_8.setSizePolicy(sizePolicy)
        self.textEdit_8.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_8.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_8.setFont(font)
        self.textEdit_8.setObjectName("textEdit_8")
        self.textEdit_9 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_9.setGeometry(QtCore.QRect(990, 500, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_9.sizePolicy().hasHeightForWidth())
        self.textEdit_9.setSizePolicy(sizePolicy)
        self.textEdit_9.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_9.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_9.setFont(font)
        self.textEdit_9.setObjectName("textEdit_9")
        self.textEdit_10 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_10.setGeometry(QtCore.QRect(990, 530, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_10.sizePolicy().hasHeightForWidth())
        self.textEdit_10.setSizePolicy(sizePolicy)
        self.textEdit_10.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_10.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_10.setFont(font)
        self.textEdit_10.setObjectName("textEdit_10")
        self.textEdit_11 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_11.setGeometry(QtCore.QRect(990, 560, 71, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit_11.sizePolicy().hasHeightForWidth())
        self.textEdit_11.setSizePolicy(sizePolicy)
        self.textEdit_11.setMinimumSize(QtCore.QSize(0, 30))
        self.textEdit_11.setMaximumSize(QtCore.QSize(100, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        font.setPointSize(12)
        self.textEdit_11.setFont(font)
        self.textEdit_11.setObjectName("textEdit_11")
        self.label_58 = QtWidgets.QLabel(self.centralwidget)
        self.label_58.setGeometry(QtCore.QRect(880, 560, 81, 30))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred,
                                           QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_58.sizePolicy().hasHeightForWidth())
        self.label_58.setSizePolicy(sizePolicy)
        self.label_58.setMinimumSize(QtCore.QSize(0, 30))
        self.label_58.setMaximumSize(QtCore.QSize(200, 30))
        font = QtGui.QFont()
        font.setFamily("等线")
        self.label_58.setFont(font)
        self.label_58.setObjectName("label_58")
        self.label_42.raise_()
        self.tabWidget.raise_()
        self.label_54.raise_()
        self.label_51.raise_()
        self.label_45.raise_()
        self.label_55.raise_()
        self.label_40.raise_()
        self.label_39.raise_()
        self.pushButton_2.raise_()
        self.pushButton_4.raise_()
        self.pushButton_10.raise_()
        self.label_57.raise_()
        self.label_49.raise_()
        self.label_34.raise_()
        self.label_56.raise_()
        self.label_52.raise_()
        self.pushButton_3.raise_()
        self.textEdit_5.raise_()
        self.label_48.raise_()
        self.pushButton.raise_()
        self.textEdit_6.raise_()
        self.textEdit_7.raise_()
        self.textEdit_8.raise_()
        self.textEdit_9.raise_()
        self.textEdit_10.raise_()
        self.textEdit_11.raise_()
        self.label_58.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1140, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionsave_result = QtWidgets.QAction(MainWindow)
        self.actionsave_result.setObjectName("actionsave_result")
        self.menu.addAction(self.actionExit)
        self.menu.addAction(self.actionsave_result)
        self.menubar.addAction(self.menu.menuAction())

        self.pushButton.clicked.connect(self.button_open_camera1_clicked)
        self.pushButton_2.clicked.connect(self.button_close_camera1_clicked)
        self.pushButton_3.clicked.connect(self.button_open_camera2_clicked)
        self.pushButton_4.clicked.connect(self.button_close_camera2_clicked)
        self.pushButton_7.clicked.connect(self.Take_Photo)
        self.pushButton_14.clicked.connect(self.Detect_angle)
        self.pushButton_11.clicked.connect(self.Detect_distance)
        self.pushButton_10.clicked.connect(self.close_window)
        self.timer_camera1.timeout.connect(self.show_camera1)
        self.timer_camera2.timeout.connect(self.show_camera2)
        self.textEdit_2.setReadOnly(1)
        self.textEdit_5.setReadOnly(1)
        self.textEdit_6.setReadOnly(1)
        self.textEdit_7.setReadOnly(1)
        self.textEdit_8.setReadOnly(1)
        self.textEdit_9.setReadOnly(1)
        self.textEdit_10.setReadOnly(1)
        self.textEdit_5.setPlaceholderText('0')
        self.textEdit_6.setPlaceholderText('0')
        self.textEdit_7.setPlaceholderText('0')
        self.textEdit_8.setPlaceholderText('0')
        self.textEdit_9.setPlaceholderText('0')
        self.textEdit_10.setPlaceholderText('0')
        self.lineEdit_4.setPlaceholderText('0.00')
        self.lineEdit_5.setPlaceholderText('0.00')
        self.lineEdit_6.setPlaceholderText('0.00')
        self.lineEdit_7.setPlaceholderText('0.00')
        self.lineEdit_8.setPlaceholderText('0.000')
        self.lineEdit_9.setPlaceholderText('0.000')
        self.lineEdit_10.setPlaceholderText('0')
        self.lineEdit_12.setPlaceholderText('0')
        self.lineEdit_11.setPlaceholderText('0.00')
        self.lineEdit_13.setPlaceholderText('0.00')
        self.lineEdit_14.setPlaceholderText('0')
        self.lineEdit_15.setPlaceholderText('0')
        self.lineEdit_4.setText('0.00')
        self.lineEdit_5.setText('0.00')
        self.lineEdit_6.setText('0.00')
        self.lineEdit_7.setText('0.00')
        self.lineEdit_8.setText('0.000')
        self.lineEdit_9.setText('0.000')
        self.lineEdit_10.setText('0')
        self.lineEdit_11.setText('0.00')
        self.lineEdit_12.setText('0')
        self.lineEdit_13.setText('0.00')
        self.lineEdit_14.setText('0')
        self.lineEdit_15.setText('0')
        self.lineEdit_4.setValidator(QDoubleValidator(0.00, 99.99, 2))
        self.lineEdit_5.setValidator(QDoubleValidator(0.00, 99.99, 2))
        self.lineEdit_6.setValidator(QDoubleValidator(0.00, 99.99, 2))
        self.lineEdit_7.setValidator(QDoubleValidator(0.00, 99.99, 2))
        self.lineEdit_8.setValidator(QDoubleValidator(0.00, 99.99, 2))
        self.lineEdit_9.setValidator(QDoubleValidator(0.00, 99.99, 4))
        self.lineEdit_10.setValidator(QIntValidator(1, 99))
        self.lineEdit_11.setValidator(QDoubleValidator(0.99, 99.99, 2))
        self.lineEdit_12.setValidator(QIntValidator(1, 99))
        self.lineEdit_13.setValidator(QDoubleValidator(0.99, 99.99, 2))
        self.comboBox_4.activated.connect(self.selectionchange)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        self.checkBox.toggled['bool'].connect(self.comboBox_2.setEnabled)
        self.checkBox_2.toggled['bool'].connect(self.comboBox_3.setEnabled)
        self.checkBox_3.toggled['bool'].connect(self.comboBox_4.setEnabled)
        self.checkBox_2.toggled['bool'].connect(self.checkBox.setDisabled)
        self.checkBox.toggled['bool'].connect(self.checkBox_2.setDisabled)
        # self.pushButton_10.clicked.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "导线缠绕参数检测平台"))
        self.label_10.setText(_translate("MainWindow", "线圈信息"))
        self.label_18.setText(_translate("MainWindow", "线圈长度(mm):"))
        self.label_19.setText(_translate("MainWindow", "起始距离(mm):"))
        self.label_21.setText(_translate("MainWindow", "线圈周长(mm):"))
        self.label_20.setText(_translate("MainWindow", "终点距离(mm):"))
        self.label_23.setText(_translate("MainWindow", "纸带信息"))
        self.label_24.setText(_translate("MainWindow", "纸带宽度(mm):"))
        self.label_25.setText(_translate("MainWindow", "纸带颜色:"))
        self.label_31.setText(_translate("MainWindow", "缠绕数量(条):"))
        self.label_30.setText(_translate("MainWindow", "每层匝数："))
        self.label_28.setText(_translate("MainWindow", "导线原始线宽(mm):"))
        self.label_29.setText(_translate("MainWindow", "导线信息"))
        self.label_27.setText(_translate("MainWindow", "导线压扁线宽(mm):"))
        self.comboBox.setItemText(0, _translate("MainWindow", "黄色"))
        self.comboBox.setItemText(1, _translate("MainWindow", "白色"))
        self.comboBox.setItemText(2, _translate("MainWindow", "黑色"))
        self.comboBox.setItemText(3, _translate("MainWindow", "红色"))
        self.label_8.setText(_translate("MainWindow", "标定尺寸"))
        self.label_60.setText(_translate("MainWindow", "（mm/pixel）"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2),
                                  _translate("MainWindow", "参数预设"))
        self.label_33.setText(_translate("MainWindow", "图像运算"))
        self.checkBox_3.setText(_translate("MainWindow", "滤波列表"))
        self.checkBox.setText(_translate("MainWindow", "腐蚀"))
        self.checkBox_2.setText(_translate("MainWindow", "膨胀"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "1*1"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "3*3"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "5*5"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "1*1"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "3*3"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "5*5"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "中值滤波"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "均值滤波"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "高斯滤波"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "各向异性扩散滤波"))
        self.label_35.setText(_translate("MainWindow", "边缘检测阈值"))
        self.label_37.setText(_translate("MainWindow", "Canny低阈值"))
        self.label_38.setText(_translate("MainWindow", "Canny高阈值"))
        self.label_41.setText(_translate("MainWindow", "信息显示窗口"))
        self.pushButton_7.setText(_translate("MainWindow", "拍照"))
        self.pushButton_14.setText(_translate("MainWindow", "角度检测"))
        self.pushButton_11.setText(_translate("MainWindow", "间距检测"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3),
                                  _translate("MainWindow", "调整选项"))
        self.label_54.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "最大角度(°)</span></p></body></html>"))
        self.label_51.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "最小间距(mm)</span></p></body></html>"))
        self.label_45.setText(_translate("MainWindow", "检测结果显示"))
        self.label_55.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "最小角度(°)</span></p></body></html>"))
        self.label_40.setText(_translate("MainWindow", "导线平面"))
        self.label_39.setText(_translate("MainWindow", "相机2"))
        self.pushButton_2.setText(_translate("MainWindow", "关闭相机2"))
        self.pushButton_4.setText(_translate("MainWindow", "关闭相机1"))
        self.pushButton_10.setText(_translate("MainWindow", "关闭软件"))
        self.label_57.setText(_translate("MainWindow", "变压器绕组导线缠绕参数检测系统V2.0"))
        self.label_49.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "最大间距(mm)</span></p></body></html>"))
        self.label_34.setText(_translate("MainWindow", "相机1"))
        self.label_56.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "平均角度(°)</span></p></body></html>"))
        self.label_52.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "平均间距(mm)</span></p></body></html>"))
        self.pushButton_3.setText(_translate("MainWindow", "打开相机1"))
        self.textEdit_5.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                     "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" />"
                                     "<style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\'; "
                                     "font-size:9pt;\"><br /></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow", "打开相机2"))
        self.textEdit_6.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                     "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" "
                                     "/><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\'; "
                                     "font-size:9pt;\"><br /></p></body></html>"))
        self.textEdit_7.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                     "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" />"
                                     "<style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\'; "
                                     "font-size:9pt;\"><br /></p></body></html>"))
        self.textEdit_8.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                     "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" "
                                     "/><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\';"
                                     " font-size:9pt;\"><br /></p></body></html>"))
        self.textEdit_9.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                     "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" "
                                     "/><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\'; "
                                     "font-size:9pt;\"><br /></p></body></html>"))
        self.textEdit_10.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\""
                                     " \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\""
                                     " /><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\';"
                                     " font-size:9pt;\"><br /></p></body></html>"))
        self.textEdit_11.setHtml(
            _translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" "
                                     "\"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                     "<html><head><meta name=\"qrichtext\" content=\"1\" "
                                     "/><style type=\"text/css\">\n"
                                     "p, li { white-space: pre-wrap; }\n"
                                     "</style></head><body style=\" font-family:\'等线\'; "
                                     "font-size:12pt; font-weight:400; font-style:normal;\">\n"
                                     "<p style=\"-qt-paragraph-type:empty; margin-top:0px; "
                                     "margin-bottom:0px; margin-left:0px; margin-right:0px; "
                                     "-qt-block-indent:0; text-indent:0px; font-family:\'SimSun\';"
                                     " font-size:9pt;\"><br /></p></body></html>"))
        self.label_58.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:12pt;\">"
                                         "出线角度(°)</span></p></body></html>"))
        self.menu.setTitle(_translate("MainWindow", "菜单"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionsave_result.setText(_translate("MainWindow", "save result"))

    def button_open_camera1_clicked(self):
        self.pushButton.setEnabled(False)
        flag1 = self.cap1.open(self.CAM_NUM1)
        if flag1 == False:
            msg = QtWidgets.QMessageBox.warning(self, 'warning',
                                                "请检查相机于电脑是否连接正确",
                                                buttons=QtWidgets.QMessageBox.Ok)
        else:
            self.timer_camera1.start(30)
            self.pushButton.setText('运行中')

    def button_open_camera2_clicked(self):
        self.pushButton_3.setEnabled(False)
        # self.cap2.set(3, 4024)
        # self.cap2.set(4, 3036)
        flag2 = self.cap2.open(self.CAM_NUM2)
        self.cap2.set(3, 4024)
        self.cap2.set(4, 3036)
        if flag2 == False:
            msg = QtWidgets.QMessageBox.warning(self,
                                                'warning', "请检查相机于电脑是否连接正确",
                                                buttons=QtWidgets.QMessageBox.Ok)
            self.FLAG = 0
        else:
            self.timer_camera2.start(30)
            self.pushButton_3.setText('运行中')
            self.FLAG = 1

    def button_close_camera1_clicked(self):
        self.pushButton.setEnabled(True)
        self.timer_camera1.stop()
        self.cap1.release()
        self.label_39.clear()
        self.label_40.clear()
        self.textEdit_11.clear()
        self.label_39.setText('相机2')
        self.label_40.setText('导线平面')
        self.pushButton.setText('打开相机1')

    def button_close_camera2_clicked(self):
        self.pushButton_3.setEnabled(True)
        self.timer_camera2.stop()
        self.cap2.release()
        self.label_34.clear()
        self.label_34.setText('相机1')
        self.label_40.clear()
        self.label_40.setText('导线平面')
        self.pushButton_3.setText('打开相机2')
        self.FLAG = 0

    def show_camera1(self):
        flag1, self.image = self.cap1.read()
        show = cv2.resize(self.image, (320, 240))
        show = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)
        gray = cv2.cvtColor(show, cv2.COLOR_BGR2GRAY)
        ret, temp = cv2.threshold(gray, 80, 255, cv2.THRESH_BINARY)
        edges = cv2.Canny(temp, 50, 100)
        lines = cv2.HoughLinesP(edges, 1.58, numpy.pi / 180, 100,
                                minLineLength=100, maxLineGap=150)
        if lines is not None:
            # for line in lines:
                # for x1, y1, x2, y2 in line:
                #     pass
            cv2.line(show, (lines[0][0][0], lines[0][0][1]), (lines[0][0][2], lines[0][0][3]), (255, 0, 0), 1)
            temo = lines[0][0][2] - lines[0][0][0]
            if temo == 0:
                angle = 0
                angle = str(angle)
                self.textEdit_11.clear()
                self.textEdit_11.append(angle)
            else:
                angle = math.degrees(math.atan((temo / (lines[0][0][3] - lines[0][0][1]))))
                angle = str(angle)
                angle = angle[0:6]
                self.textEdit_11.clear()
                self.textEdit_11.append(angle)
        else:
            self.textEdit_2.append("未识别到导线")
        showImage = QtGui.QImage(show.data, show.shape[1],
                                 show.shape[0], QtGui.QImage.Format_RGB888)
        self.label_39.setPixmap(QtGui.QPixmap.fromImage(showImage))

    def show_camera2(self):
        flag2, self.image = self.cap2.read()
        # self.image = cv2.resize(self.image, (4024, 3036))
        show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)
        # self.Gray_image = show[100:340, 160:480].copy()  # dtype uint8
        showImage = QtGui.QImage(show.data, show.shape[1],
                                 show.shape[0], QtGui.QImage.Format_RGB888)
        self.label_34.setPixmap(QtGui.QPixmap.fromImage(showImage))
        self.label_34.setScaledContents(True)  # 自适应缩放图像

    def Take_Photo(self):
        if self.FLAG == 0:
            self.statusbar.showMessage("相机未打开", 5000)
            self.textEdit_2.append("摄像头未打开")
            msg = QtWidgets.QMessageBox.warning(self,
                                                'warning', "相机未正确打开，请重新检查",
                                                buttons=QtWidgets.QMessageBox.Ok)
        else:
            flag2, self.img = self.cap2.read()
            show = cv2.resize(self.img, (4024, 3036))
            show = cv2.cvtColor(show, cv2.COLOR_BGR2BGRA)
            cv2.imwrite(self.save_path + '1000%d.jpg' % (self.Freq), show)
            self.statusbar.showMessage("第%d张拍摄完成" % (self.Freq), 2000)
            self.textEdit_2.append("第%d张拍摄完成" % (self.Freq))
            showImage = cv2.resize(self.img, (320, 240))
            showImage = cv2.cvtColor(showImage, cv2.COLOR_BGR2RGB)
            showImage = QtGui.QImage(showImage.data, showImage.shape[1],
                                     showImage.shape[0], QtGui.QImage.Format_RGB888)
            self.label_40.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.Freq += 1

    def Detect_angle(self):
        self.textEdit_8.clear()
        self.textEdit_9.clear()
        self.textEdit_10.clear()
        image1 = cv2.imread(self.save_path + '1000%d.jpg' % (self.Freq - 1), 0)
        image = image1[1800:2440, 1750:2230]
        precision = 79
        low_value = 200
        sum = 0
        save_dir = ".\\save"
        path = "./save/"
        x = int(image.shape[0] / precision)  # 分块长度
        for i in range(0, precision + 1):
            un8 = numpy.zeros((x, image.shape[1], 3), numpy.uint8)
            un9 = image[i * x:(i + 1) * x, 0:image.shape[1]]
            sum = 0
            for k in range(0, un9.shape[0]):
                for j in range(0, un9.shape[1]):
                    sum += un9[k][j]
            average_gray = sum / (un9.shape[0] * un9.shape[1])
            if average_gray < low_value:
                un7 = cv2.equalizeHist(un9)
            else:
                un7 = un9
            cv2.imwrite(save_dir + '/' + '%d.jpg' % (i), un7)
        save_path = path + str(0) + ".jpg"
        img_out = cv2.imread(save_path)
        num = precision + 1
        for i in range(1, num):
            save_path = path + str(i) + ".jpg"
            img_tmp = cv2.imread(save_path)
            img_out = numpy.concatenate((img_out, img_tmp), axis=0)
        # cv2.imwrite(self.save_path + '/' + "%d.jpg" % (num), img_out)
        # img_out2 = cv2.imread(self.save_path + '/' + "%d.jpg" % (num),0)
        temp1 = cv2.cvtColor(img_out, cv2.COLOR_BGR2GRAY)
        for i in range(0, image.shape[0]):
            for j in range(0, image.shape[1]):
                sum += image[i, j]
        average = sum / image.shape[0] / image.shape[1] / 2
        _, temp = cv2.threshold(temp1, average, 255, cv2.THRESH_BINARY)
        erosion = cv2.dilate(temp, kernel=numpy.ones((1, 3), numpy.uint8))
        binary = cv2.erode(erosion, kernel=numpy.ones((3, 3), numpy.uint8))
        binary[binary == 255] = 1
        skeleton0 = morphology.skeletonize(binary)
        skel = skeleton0.astype(numpy.uint8) * 255
        edges = cv2.Canny(skel, 150, 550, apertureSize=3)
        lines = cv2.HoughLinesP(edges, rho=1, theta=numpy.pi / 180,
                                threshold=100, minLineLength=200, maxLineGap=150)
        inf_angle = []
        for line in lines:
            for x1, y1, x2, y2 in line:
                if abs(y2 - y1) > image.shape[1] / 2:
                    angle = math.degrees(math.atan(((x2 - x1) / (y2 - y1))))
                    up_int = round(angle, 3)
                    slip_angle = float(str(angle)[0:5])
                    # print(up_int, '\t', slip_angle)
                    inf_angle.append(slip_angle)
            # print('Angle:', inf_angle)
        max_angle = max(inf_angle)
        min_angle = min(inf_angle)
        mid_angle = numpy.median(inf_angle)
        print(max_angle, min_angle, mid_angle)
        self.textEdit_8.append(str(max_angle))
        self.textEdit_9.append(str(min_angle))
        self.textEdit_10.append(str(mid_angle)[:4])
        self.textEdit_2.append(str(inf_angle))

    def Detect_distance(self):
        self.Final_value = []
        self.set1 = []
        self.set2 = []
        self.lst1 = []
        self.lst2 = []
        self.bofeng_mid_point = []
        self.bogu_mid_point = []
        self.textEdit_5.clear()
        self.textEdit_6.clear()
        self.textEdit_7.clear()
        self.Real_weigh = float(self.lineEdit_13.text())
        self.K_pixel = float(self.lineEdit_9.text())
        if self.Real_weigh == 0 or self.K_pixel == 0:
            self.textEdit_2.append('标定参数或导线尺寸未修改，请注意核对')
            msg = QtWidgets.QMessageBox.warning(self,
                                                'warning', "参数为0，请先填写参数！！",
                                                buttons=QtWidgets.QMessageBox.Ok)
        else:
            self.Pixel_weigh = self.Real_weigh / self.K_pixel
            lunkuo_img = cv2.imread(self.save_path + '1000%d.jpg' % (self.Freq - 1), 1)
            # lunkuo_img = image1[1900:2540, 450:800]
            # lunkuo_img = originalimg[648:768,2020:2270] # 轮廓图像
            # lunkuo_img = BiLinear_interpolation(lunkuo_img,
            #                                     lunkuo_img.shape[0]*3,
            #                                     lunkuo_img.shape[1]*3)
            # lunkuo_img = cv2.imread(self.save_path + 'li1.jpg', 1)
            outline_img1 = cv2.cvtColor(lunkuo_img, cv2.COLOR_BGR2GRAY)
            _, otsu = cv2.threshold(outline_img1, None, 255, cv2.THRESH_OTSU)
            otsu = cv2.erode(otsu, kernel=numpy.ones((3, 3), numpy.uint8))
            canny = cv2.Canny(otsu, 100, 500, None, 3)
            for j in range(canny.shape[1]):
                for i in range(canny.shape[0]):
                    if canny[i][j] == 0:
                        continue
                    else:
                        self.set1.append([j, i])
            img2 = numpy.pad(canny, ((0, 0), (25, 25)), 'constant',
                             constant_values=((0, 0), (0, 0)))
            un8 = numpy.zeros((img2.shape[0], img2.shape[1], 3), numpy.uint8) + 255
            for i in range(25):
                img2[self.set1[0][1]][i] = 255
                img2[self.set1[len(self.set1) - 1][1]][img2.shape[1] - i - 1] = 255
            for j in range(img2.shape[1]):
                for i in range(img2.shape[0]):
                    if img2[i][j] == 0:
                        continue
                    else:
                        un8[i][j] = [0, 0, 0]
                        self.set2.append([j, i])
            for i in range(25, len(self.set2) - 25):
                max_y_label = max(self.set2[i - 25][1],
                                  self.set2[i - 24][1],
                                  self.set2[i - 23][1],
                                  self.set2[i - 22][1],
                                  self.set2[i - 21][1],
                                  self.set2[i - 20][1],
                                  self.set2[i - 19][1],
                                  self.set2[i - 18][1],
                                  self.set2[i - 17][1],
                                  self.set2[i - 16][1],
                                  self.set2[i - 15][1],
                                  self.set2[i - 14][1],
                                  self.set2[i - 13][1],
                                  self.set2[i - 12][1],
                                  self.set2[i - 11][1],
                                  self.set2[i - 10][1],
                                  self.set2[i - 9][1],
                                  self.set2[i - 8][1],
                                  self.set2[i - 7][1],
                                  self.set2[i - 6][1],
                                  self.set2[i - 5][1],
                                  self.set2[i - 4][1],
                                  self.set2[i - 3][1],
                                  self.set2[i - 2][1],
                                  self.set2[i - 1][1],
                                  self.set2[i + 1][1],
                                  self.set2[i + 2][1],
                                  self.set2[i + 3][1],
                                  self.set2[i + 4][1],
                                  self.set2[i + 5][1],
                                  self.set2[i + 6][1],
                                  self.set2[i + 7][1],
                                  self.set2[i + 8][1],
                                  self.set2[i + 9][1],
                                  self.set2[i + 10][1],
                                  self.set2[i + 11][1],
                                  self.set2[i + 12][1],
                                  self.set2[i + 13][1],
                                  self.set2[i + 14][1],
                                  self.set2[i + 15][1],
                                  self.set2[i + 16][1],
                                  self.set2[i + 17][1],
                                  self.set2[i + 18][1],
                                  self.set2[i + 19][1],
                                  self.set2[i + 20][1],
                                  self.set2[i + 21][1],
                                  self.set2[i + 22][1],
                                  self.set2[i + 23][1],
                                  self.set2[i + 24][1],
                                  self.set2[i + 25][1])
                min_y_label = min(self.set2[i - 25][1],
                                  self.set2[i - 24][1],
                                  self.set2[i - 23][1],
                                  self.set2[i - 22][1],
                                  self.set2[i - 21][1],
                                  self.set2[i - 20][1],
                                  self.set2[i - 19][1],
                                  self.set2[i - 18][1],
                                  self.set2[i - 17][1],
                                  self.set2[i - 16][1],
                                  self.set2[i - 15][1],
                                  self.set2[i - 14][1],
                                  self.set2[i - 13][1],
                                  self.set2[i - 12][1],
                                  self.set2[i - 11][1],
                                  self.set2[i - 10][1],
                                  self.set2[i - 9][1],
                                  self.set2[i - 8][1],
                                  self.set2[i - 7][1],
                                  self.set2[i - 6][1],
                                  self.set2[i - 5][1],
                                  self.set2[i - 4][1],
                                  self.set2[i - 3][1],
                                  self.set2[i - 2][1],
                                  self.set2[i - 1][1],
                                  self.set2[i + 1][1],
                                  self.set2[i + 2][1],
                                  self.set2[i + 3][1],
                                  self.set2[i + 4][1],
                                  self.set2[i + 5][1],
                                  self.set2[i + 6][1],
                                  self.set2[i + 7][1],
                                  self.set2[i + 8][1],
                                  self.set2[i + 9][1],
                                  self.set2[i + 10][1],
                                  self.set2[i + 11][1],
                                  self.set2[i + 12][1],
                                  self.set2[i + 13][1],
                                  self.set2[i + 14][1],
                                  self.set2[i + 15][1],
                                  self.set2[i + 16][1],
                                  self.set2[i + 17][1],
                                  self.set2[i + 18][1],
                                  self.set2[i + 19][1],
                                  self.set2[i + 20][1],
                                  self.set2[i + 21][1],
                                  self.set2[i + 22][1],
                                  self.set2[i + 23][1],
                                  self.set2[i + 24][1],
                                  self.set2[i + 25][1])
                if self.set2[i][1] >= max_y_label:
                    self.lst1.append([self.set2[i][0], self.set2[i][1]])
                if self.set2[i][1] <= min_y_label:
                    self.lst2.append([self.set2[i][0], self.set2[i][1]])
                else:
                    continue
            lst1 = self.lst1
            lst2 = self.lst2
            lst3 = self.lst1.copy()
            lst4 = self.lst2.copy()
            for i in lst1:
                if len(lst3) != 0:
                    return_num, return_point = self.image_process.delete_repit(lst3)
                    self.bogu_mid_point.append(return_point)
                    for i in range(return_num):
                        lst3.pop(0)
                else:
                    pass
            for i in lst2:
                if len(lst4) != 0:
                    return_num, return_point = self.image_process.delete_repit(lst4)
                    self.bofeng_mid_point.append(return_point)
                    for i in range(return_num):
                        lst4.pop(0)
                else:
                    pass

            if len(self.bofeng_mid_point) > len(self.bogu_mid_point):
                tempi, tempj = self.image_process.type_M(self.bofeng_mid_point,
                                                         self.bogu_mid_point)
                print('bogudata:', '\n', tempi)
                print('bofengdata', '\n', tempj)
                # return tempi
                # return tempj
            elif len(self.bofeng_mid_point) < len(self.bogu_mid_point):
                tempi, tempj = self.image_process.type_W(self.bofeng_mid_point,
                                                         self.bogu_mid_point)
                print('bogudata', '\n', tempi)
                print('bofengdata', '\n', tempj)
                # return tempi
                # return tempj
            else:
                if self.bofeng_mid_point[0][0] > self.bogu_mid_point[0][0] \
                        and self.bofeng_mid_point[len(self.bofeng_mid_point) - 1][0] > \
                        self.bogu_mid_point[len(self.bogu_mid_point) - 1][0]:
                    tempi, tempj = self.image_process.type_INV_N(self.bofeng_mid_point,
                                                                 self.bogu_mid_point)
                    print('bogudata', '\n', tempi)
                    print('bofengdata', '\n', tempj)
                    # return tempi
                    # return tempj
                elif self.bofeng_mid_point[0][0] < self.bogu_mid_point[0][0] \
                        and self.bofeng_mid_point[len(self.bofeng_mid_point) - 1][0] < \
                        self.bogu_mid_point[len(self.bogu_mid_point) - 1][0]:
                    tempi, tempj = self.image_process.type_N(self.bofeng_mid_point,
                                                             self.bogu_mid_point)
                    print('bogudata', '\n', tempi)
                    print('bofengdata', '\n', tempj)
                    # return tempi
                    # return tempj
                else:
                    print("工艺设计问题，请重新编写代码段！！！")
            for i in range(len(tempi) - 1):
                # print(tempi[i][0])
                Final_dist = math.sqrt(
                    (tempi[i + 1][0] - tempi[i][0]) ** 2 + (tempi[i + 1][1] - tempi[i][1]) ** 2) - self.Pixel_weigh
                self.Final_value.append(abs(round(Final_dist * self.K_pixel, 3)))

            self.textEdit_5.append(str(max(self.Final_value)))
            self.textEdit_6.append(str(min(self.Final_value)))
            self.textEdit_7.append(str(numpy.median(self.Final_value)))
            self.textEdit_2.append(str(tempi))

    def selectionchange(self, i):
        self.textEdit_2.append(self.comboBox_4.currentText())
        self.textEdit_2.append(str(self.comboBox_4.currentIndex()))

    def close_window(self):
        reply_box = QMessageBox.question(self, "Warning", "是否退出软件?",
                                         QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if reply_box == QMessageBox.Yes:
            # Ui_MainWindow.close(self)
            QAPP = QApplication.instance()
            QAPP.quit()


class LoginDialog(QDialog):
    def __init__(self, *args, **kwargs):
        '''
        Constructor to initialize the contents of the login dialog.
        :param args:
        :param kwargs:
        '''
        super().__init__(*args, **kwargs)
        self.setWindowTitle('欢迎登录')
        self.resize(660, 500)
        self.setFixedSize(self.width(), self.height())
        self.setWindowFlags(Qt.WindowCloseButtonHint)
        self.frame0 = QFrame(self)
        self.frame0.move(0, 0)
        self.horizontalLayout0 = QHBoxLayout(self.frame0)
        self.frame1 = QFrame(self)
        self.frame1.move(110, 60)
        self.horizontalLayout1 = QHBoxLayout(self.frame1)
        self.frame2 = QFrame(self)
        self.frame2.move(250, 150)
        self.verticalLayout = QVBoxLayout(self.frame2)
        self.label_57 = QLabel()
        self.label_57.setPixmap(QtGui.QPixmap("background.jpg"))
        self.horizontalLayout0.addWidget(self.label_57)
        self.text = QLabel()
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(20)
        self.text.setFont(font)
        self.text.setText("变压器绕组导线缠绕参数检测系统V2.0")
        self.horizontalLayout1.addWidget(self.text)
        self.login_id = QLineEdit()
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.login_id.setFont(font)
        self.login_id.setMinimumSize(QtCore.QSize(140, 30))
        self.login_id.setMaximumSize(QtCore.QSize(140, 30))
        self.login_id.setPlaceholderText("请输入登录账号")
        self.verticalLayout.addWidget(self.login_id)
        self.passwd = QLineEdit()
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.passwd.setFont(font)
        self.passwd.setMinimumSize(QtCore.QSize(140, 30))
        self.passwd.setMaximumSize(QtCore.QSize(140, 30))
        self.passwd.setPlaceholderText("请输入登录密码")
        self.verticalLayout.addWidget(self.passwd)
        self.button_enter = QPushButton()
        self.button_enter.setText("登录")
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.button_enter.setFont(font)
        self.button_enter.setStyleSheet("#pushButton\n"
                                        "{\n"
                                        "\n"
                                        "    background-color: rgb(214, 214, 214);\n"
                                        "}\n"
                                        "#pushButton:pressed\n"
                                        "{\n"
                                        "    background-color: rgb(0, 190, 0);\n"
                                        "}")
        self.button_enter.setMinimumSize(QtCore.QSize(140, 30))
        self.button_enter.setMaximumSize(QtCore.QSize(140, 30))
        self.button_enter.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.button_enter)
        self.button_quit = QPushButton()
        self.button_quit.setText("退出")
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.button_quit.setFont(font)
        self.button_quit.setStyleSheet("#pushButton_2\n"
                                       "{\n"
                                       "\n"
                                       "    background-color: rgb(214, 214, 214);\n"
                                       "}\n"
                                       "#pushButton_2:pressed\n"
                                       "{\n"
                                       "    background-color: rgb(190, 0, 0);\n"
                                       "}")
        self.button_quit.setMinimumSize(QtCore.QSize(140, 30))
        self.button_quit.setMaximumSize(QtCore.QSize(140, 30))
        self.button_quit.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.button_quit)
        self.button_enter.clicked.connect(self.button_enter_verify)
        self.button_quit.clicked.connect(
            QCoreApplication.instance().quit)

    def button_enter_verify(self):
        if self.login_id.text() != "123":
            # print("test1")
            QtWidgets.QMessageBox.warning(self,
                                                'warning', "用户名或密码错误",
                                                buttons=QtWidgets.QMessageBox.Ok)
            return
        if self.passwd.text() != "123":
            # print("test2")
            QtWidgets.QMessageBox.warning(self,
                                                'warning', "用户名或密码错误",
                                                buttons=QtWidgets.QMessageBox.Ok)
            return
        QtWidgets.QMessageBox.about(self, " ", "登录成功，欢迎您使用本系统！")
        self.accept()


if __name__ == '__main__':
    window_application = QApplication(sys.argv)
    login_ui = LoginDialog()
    if login_ui.exec_() == QDialog.Accepted:
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(window_application.exec_())
